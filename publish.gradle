apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return hasProperty('IS_RELEASE')? IS_RELEASE : false
}

def getRepositoryUrl(){
    if(isReleaseBuild()){
        return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    }else{
        return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                : "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

repositories {
    mavenCentral()
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                if(isReleaseBuild()) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }else{
                    VERSION_NAME+="-SNAPSHOT"
                }

                pom.groupId = GROUP_ID
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'gevorg-kopalyan'
                            name 'Gevorg Kopalyan'
                            email 'gevorg.kopalyan@gmail.com'
                        }
                        developer {
                            id 'azakhary'
                            name 'Avetis Zakharyan'
                            email 'avetis.zakharyan@gmail.com'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task myjavaDocs(type: Javadoc){
        source = source = 'src/main/java'
    }

    task artifactDocs(type: Jar, dependsOn: myjavaDocs) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task artifactSources(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        if(POM_PACKAGING == 'jar'){
            archives jar
        }
        archives artifactDocs
        archives artifactSources
    }
}



